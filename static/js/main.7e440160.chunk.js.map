{"version":3,"sources":["components/buttons.js","components/index.js","components/screen.js","App.js","serviceWorker.js","index.js"],"names":["NumberButtons","props","Fragment","map","number","className","key","onClick","addChar","OperatorButtons","operator","ResetButtons","clearResult","deleteChar","SubmitButton","findSum","Calculator","char","lastResult","state","result","lastChar","slice","some","length","setState","newResult","sum","eval","toString","previousResult","this","class","Component","Screen","console","log","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.7e440160.chunk.js","sourcesContent":["import React from \"react\";\n\nexport const NumberButtons = (props) => {\n  const numbers = [\"7\", \"8\", \"9\", \"4\", \"5\", \"6\", \"1\", \"2\", \"3\", \"0\"];\n  return (\n    <React.Fragment>\n      {numbers.map((number) => {\n        return (\n          <button  className=\"col-md-4\" key={number} onClick={() => props.addChar(number)}>\n            {number}\n          </button>\n        );\n      })}\n    </React.Fragment>\n  );\n};\n\nexport const OperatorButtons = (props) => {\n  const operators = [\"/\", \"*\", \"-\", \"+\"];\n  return (\n    <React.Fragment>\n      {operators.map((operator) => {\n        return (\n          <button className=\"col-md-12\" key={operator} onClick={() => props.addChar(operator)}>\n            {operator}\n          </button>\n        );\n      })}\n    </React.Fragment>\n  );\n};\n\nexport const ResetButtons = (props) => {\n  return (\n    <React.Fragment>\n      <button className=\"p-2 flex-fill col-lg-6\" onClick={() => props.clearResult()}>\n        C\n      </button>\n      <button className=\"p-2 flex-fill col-lg-6 bg-danger\" onClick={() => props.deleteChar()}>\n        DEL\n      </button>\n    </React.Fragment>\n  );\n};\n\nexport const SubmitButton = (props) => {\n  return (\n    <React.Fragment>\n      <button className=\"flex-grow-1\" onClick={() => props.findSum()}>\n        =\n      </button>\n    </React.Fragment>\n  );\n};\n","import React, { Component } from \"react\";\nimport {\n  NumberButtons,\n  OperatorButtons,\n  ResetButtons,\n  SubmitButton,\n} from \"./buttons\";\nimport {Screen} from './screen';\nexport default class Calculator extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      result: \"\",\n      previousResult : \"\"\n    };\n  }\n  addChar = (char) => {\n    const operators = [\"/\", \"*\", \"+\", \"-\", \".\"];\n    let lastResult = this.state.result;\n    let lastChar = lastResult.slice(-1);\n    let checkChar = operators.some((operator) => {\n      let checkResult =\n        (operator === char && lastResult.length === 0) ||\n        (operator === char && lastChar === char);\n      return checkResult;\n    });\n    if (checkChar) {\n        debugger;\n      this.setState({ result: lastResult });\n    } else {\n      this.setState({ result: lastResult + char});\n    }\n  };\n  deleteChar = () => {\n    let lastResult = this.state.result;\n    if (lastResult.length === 0) {\n      this.setState({ result: \"\" });\n    } else {\n      let newResult = lastResult.slice(0, lastResult.length - 1);\n      this.setState({ result: newResult });\n    }\n  };\n  clearResult = () => {\n    this.setState({ result: \"\" });\n  };\n  findSum = () => {\n    let sum = eval(this.state.result).toString();\n    this.setState({ result: sum },()=>this.setState({previousResult:this.state.result}));\n  };\n  render() {\n      var {result,previousResult} = this.state;\n    return (\n      <div className=\"container\">\n      <div className=\"row\">\n      <div className=\"col-lg-4 col-mg-4 col-xs-12 m-auto\">\n\n<div class=\"calci-outer\">\n    \n      <div className=\"screenpad\"><Screen previousResult={previousResult} result={result}/></div>\n\n\n\n\n\n<div className=\"numpad\">\n        <div className=\"d-flex\">\n          <ResetButtons\n            clearResult={this.clearResult}\n            deleteChar={this.deleteChar}\n          />\n        </div>\n\n        <div class=\"d-flex\">\n        <div class=\"w-75 d-flex flex-wrap\">\n        <NumberButtons addChar={this.addChar} />\n          <SubmitButton findSum={this.findSum} />\n        </div>\n        <div class=\"w-25\">\n        <OperatorButtons addChar={this.addChar} />\n        </div>\n\n        </div>\n        </div>\n         \n       \n      </div>\n      </div>\n        \n</div>\n      \n      </div>\n    );\n  }\n}\n","import React from 'react';\n\nexport const Screen = props => {\n    console.log(props.result)\n    return <React.Fragment>\n        <div class=\"previousData\">{props.previousResult}</div>\n        <div class=\"currentData\">{props.result == \"\" ? \"0\" : props.result}</div>\n    </React.Fragment>\n}","import React from 'react';\nimport Calculator from './components/index';\nimport './assets/style.css'\n\nfunction App() {\n  return (\n    <React.Fragment>\n      <Calculator />\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}